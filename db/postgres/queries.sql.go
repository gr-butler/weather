// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: queries.sql

package postgres

import (
	"context"
)

const getAllRecords = `-- name: GetAllRecords :many
SELECT record_date, temperature, pressure, rain_mm, wind_speed, wind_gust, wind_direction from weather
`

func (q *Queries) GetAllRecords(ctx context.Context) ([]Weather, error) {
	rows, err := q.query(ctx, q.getAllRecordsStmt, getAllRecords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Weather
	for rows.Next() {
		var i Weather
		if err := rows.Scan(
			&i.RecordDate,
			&i.Temperature,
			&i.Pressure,
			&i.RainMm,
			&i.WindSpeed,
			&i.WindGust,
			&i.WindDirection,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const writeRecord = `-- name: WriteRecord :exec
INSERT INTO weather (
    record_date,
    temperature,
    pressure,
    rain_mm,
    wind_speed,
    wind_gust,
    wind_direction
) VALUES (
    now(), $1, $2, $3, $4, $5, $6
)
`

type WriteRecordParams struct {
	Temperature   float64 `json:"temperature"`
	Pressure      float64 `json:"pressure"`
	RainMm        float64 `json:"rain_mm"`
	WindSpeed     float64 `json:"wind_speed"`
	WindGust      float64 `json:"wind_gust"`
	WindDirection float64 `json:"wind_direction"`
}

func (q *Queries) WriteRecord(ctx context.Context, arg WriteRecordParams) error {
	_, err := q.exec(ctx, q.writeRecordStmt, writeRecord,
		arg.Temperature,
		arg.Pressure,
		arg.RainMm,
		arg.WindSpeed,
		arg.WindGust,
		arg.WindDirection,
	)
	return err
}
